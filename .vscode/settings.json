{
    "files.associations": {
        "*.tcc": "cpp",
        "chrono": "cpp",
        "memory_resource": "cpp",
        "limits": "cpp",
        "functional": "cpp",
        "type_traits": "cpp",
        "array": "cpp",
        "atomic": "cpp",
        "bitset": "cpp",
        "cctype": "cpp",
        "clocale": "cpp",
        "cmath": "cpp",
        "cstdarg": "cpp",
        "cstddef": "cpp",
        "cstdint": "cpp",
        "cstdio": "cpp",
        "cstdlib": "cpp",
        "cstring": "cpp",
        "ctime": "cpp",
        "cwchar": "cpp",
        "cwctype": "cpp",
        "deque": "cpp",
        "unordered_map": "cpp",
        "unordered_set": "cpp",
        "vector": "cpp",
        "exception": "cpp",
        "algorithm": "cpp",
        "iterator": "cpp",
        "map": "cpp",
        "memory": "cpp",
        "optional": "cpp",
        "ratio": "cpp",
        "regex": "cpp",
        "set": "cpp",
        "string": "cpp",
        "string_view": "cpp",
        "system_error": "cpp",
        "tuple": "cpp",
        "utility": "cpp",
        "fstream": "cpp",
        "initializer_list": "cpp",
        "iosfwd": "cpp",
        "iostream": "cpp",
        "istream": "cpp",
        "new": "cpp",
        "ostream": "cpp",
        "sstream": "cpp",
        "stdexcept": "cpp",
        "streambuf": "cpp",
        "typeinfo": "cpp"
    },
    "cmake.configureOnOpen": false,
    "files.autoSave": "afterDelay",
    "files.autoSaveDelay": 500,
    "editor.minimap.enabled": true,
    //"window.zoomLevel": 1,
    "testMate.cpp.log.userId": "f9a7bb76f6489ae498d1a73762158843121f4b30",
    /*"clang-tidy.checks": [

        "abseil-*",

        "android-*",

        "boost-use-to-string-*",

        "bugprone-unused-return-value-*",

        "cert-mem57-cpp-*",

        "clang-analyzer-core.DynamicTypePropagation-*",

        "clang-analyser-core.uninitiated.CapturedBlockVariable-*",

        "clang-analyzer-cplusplus.InnerPointer-*",

        "clang-analyzer-nullability.NullableReturnedFromNonnull-*",

        "clang-analyzer-optin.osx.OSObjectCStyleCast-*",

        "clang-analyzer-optin.performance.GCDAntipattern-*",

        "clang-analyzer-osx*",

        "clang-analyzer-valist*",

        "cppcoreguidelines-pro-bounds-pointer-arithmetic-*",

        "darwin*",

        "fuchsia-default-arguments-calls-*",

        "fuchsia-default-arguments-declarations-*",

        "fuchsia-overloaded-operator-*",

        "fuchsia-virtual-inheritance-*",

        "google-runtime-references-*",

        "hicpp-avoid-goto-*",

        "llvm*",

        "misc-non-copyable-objects-*",

        "modernize-concat-nested-namespaces-*",

        "modernize-unary-static-assert-*",

        "modernize-use-default-member-init-*",

        "modernize-use-trailing-return-type-*",

        "modernize-use-uncaught-exceptions-*",

        "readability-named-parameter-*",

        "readability-redundant-member-init-*",

    ],*/
    //"clang-tidy.executable": "/usr/bin/clang-tidy-10",
    "[cpp]": {
        "editor.defaultFormatter": "ms-vscode.cpptools"
    },
    "editor.formatOnSave": true,
    "editor.formatOnType": true,
    //"C_Cpp.codeAnalysis.clangTidy.enabled": true, // intellisense 1.8.x clang tidy compatible version needed
    //"C_Cpp.codeAnalysis.runAutomatically": true,
    "clang-tidy.lintOnSave": false,
    "editor.fontLigatures": false,
    // Controls if quick suggestions should show up while typing
    "editor.quickSuggestions": {
        "other": true,
        "comments": false,
        "strings": false
    },
    // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
    "editor.acceptSuggestionOnCommitCharacter": true,
    // Controls if suggestions should be accepted on 'Enter' - in addition to 'Tab'. Helps to avoid ambiguity between inserting new lines or accepting suggestions. The value 'smart' means only accept a suggestion with Enter when it makes a textual change
    "editor.acceptSuggestionOnEnter": "on",
    // Controls the delay in ms after which quick suggestions will show up.
    "editor.quickSuggestionsDelay": 10,
    // Controls if suggestions should automatically show up when typing trigger characters
    "editor.suggestOnTriggerCharacters": true,
    // Controls if pressing tab inserts the best suggestion and if tab cycles through other suggestions
    "editor.tabCompletion": "off",
    // Controls whether sorting favours words that appear close to the cursor
    "editor.suggest.localityBonus": true,
    // Controls how suggestions are pre-selected when showing the suggest list
    "editor.suggestSelection": "first",
    // Enable word based suggestions
    "editor.wordBasedSuggestions": "matchingDocuments",
    // Enable parameter hints
    "editor.parameterHints.enabled": true,
}